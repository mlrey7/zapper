datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

generator client {
  provider = "prisma-client-js" // You won't need this in Prisma 3.X or higher.
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  coverImage    String?
  bio           String    @default("")
  location      String    @default("")
  username      String?   @unique
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  likes         Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  followedBy Follows[] @relation("following")
  following  Follows[] @relation("followedBy")

  userMetrics UserMetrics?
}

model Follows {
  followedBy   User     @relation("followedBy", fields: [followedById], references: [id])
  followedById String
  following    User     @relation("following", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime @default(now())

  @@id([followingId, followedById])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  likes     Like[]

  replyToId String?
  replyTo   Post?   @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Post[]  @relation("ReplyTo")

  quoteToId String?
  quoteTo   Post?   @relation("QuoteTo", fields: [quoteToId], references: [id])
  quoted    Post[]  @relation("QuoteTo")

  postMetrics PostMetrics?

  @@index(fields: [authorId], type: Hash)
  @@index(fields: [replyToId], type: Hash)
  @@index(fields: [quoteToId], type: Hash)
}

model Like {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@id([userId, postId])
}

model PostMetrics {
  id            String @id @default(cuid())
  post          Post   @relation(fields: [postId], references: [id])
  postId        String @unique
  likesCount    Int    @default(0)
  repliesCount  Int    @default(0)
  retweetsCount Int    @default(0)

  @@index(fields: [postId], type: Hash)
}

model UserMetrics {
  id             String @id @default(cuid())
  user           User   @relation(fields: [userId], references: [id])
  userId         String @unique
  followingCount Int    @default(0)
  followersCount Int    @default(0)
}
